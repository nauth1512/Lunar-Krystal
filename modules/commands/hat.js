// modules/commands/hat.js
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const ytSearch = require("yt-search");

module.exports = {
  config: {
    name: "hat",
    aliases: ["sing", "music", "song"],
    version: "1.0.0",
    author: "ArYAN | vi·ªát ho√°: Nauth",
    countDown: 5,
    role: 0,
    shortDescription: "T√¨m v√† g·ª≠i nh·∫°c/vid t·ª´ YouTube",
    longDescription: "Nh·∫≠p t√™n b√†i h√°t, bot s·∫Ω t√¨m tr√™n YouTube v√† g·ª≠i audio (m·∫∑c ƒë·ªãnh) ho·∫∑c video.",
    category: "√Çm nh·∫°c",
    guide: "{pn} <t√™n b√†i h√°t> [audio|video]\nVD: {pn} dj lappa lappa\nVD: {pn} s∆°n t√πng making my way video",
  },

  onStart: async function ({ api, event, args }) {
    // fallback cho m√¥i tr∆∞·ªùng kh√¥ng c√≥ TTY (tr√°nh crash)
    if (!process.stderr.clearLine) process.stderr.clearLine = () => {};
    if (!process.stderr.cursorTo) process.stderr.cursorTo = () => {};

    let type = "audio";
    let songName = "";

    // n·∫øu t·ª´ cu·ªëi l√† audio/video th√¨ t√°ch ra l√†m type
    if (args.length > 1 && ["audio", "video"].includes(args[args.length - 1].toLowerCase())) {
      type = args.pop().toLowerCase();
    }
    songName = args.join(" ").trim();

    if (!songName) {
      return api.sendMessage("‚ùå Nh·∫≠p t√™n b√†i h√°t ƒëi m ∆°i.", event.threadID, event.messageID);
    }

    // g·ª≠i tin nh·∫Øn ch·ªù x·ª≠ l√Ω
    const pending = await api.sendMessage("üéµ ƒêang t√¨m v√† t·∫£i... ƒë·ª£i x√≠u nha...", event.threadID, null, event.messageID);

    try {
      // 1) T√¨m YouTube
      const searchResults = await ytSearch(songName);
      if (!searchResults || !searchResults.videos || !searchResults.videos.length) {
        throw new Error("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.");
      }

      const top = searchResults.videos[0];
      const videoId = top.videoId;

      // 2) G·ªçi API l·∫•y link t·∫£i tr·ª±c ti·∫øp (b√™n th·ª© ba c√≥ th·ªÉ ch·∫≠p ch·ªùn)
      const apiKey = "itzaryan";
      const apiUrl = `https://xyz-nix.vercel.app/aryan/youtube?id=${videoId}&type=${type}&apikey=${apiKey}`;

      api.setMessageReaction("‚åõ", event.messageID, () => {}, true);

      const { data } = await axios.get(apiUrl, { timeout: 20000 });
      const downloadUrl = data?.downloadUrl;
      if (!downloadUrl) throw new Error("API kh√¥ng tr·∫£ v·ªÅ link t·∫£i (downloadUrl).");

      // 3) T·∫£i file v·ªÅ d·∫°ng buffer
      const fileExt = type === "audio" ? "mp3" : "mp4";
      const safeTitle = (top.title || "music")
        .replace(/[/\\?%*:|"<>]/g, "")   // b·ªè k√Ω t·ª± c·∫•m tr√™n file system
        .slice(0, 100)                   // gi·ªõi h·∫°n ƒë·ªô d√†i t√™n file
        .trim() || "music";
      const filename = `${safeTitle}.${fileExt}`;

      const cacheDir = path.join(__dirname, "cache");
      if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir, { recursive: true });
      const filePath = path.join(cacheDir, filename);

      const fileRes = await axios.get(downloadUrl, {
        responseType: "arraybuffer",
        timeout: 60000,
        headers: { "User-Agent": "Mozilla/5.0" }
      });
      fs.writeFileSync(filePath, Buffer.from(fileRes.data));

      api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);

      // 4) G·ª≠i file
      await api.sendMessage(
        {
          body: `üéµ ùó°ùóõùóîÃ£ùóñ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${top.title}\n\n‚è±Ô∏è ${top.timestamp || "‚Äî"} | üëÄ ${top.views?.toLocaleString?.() || top.views || "‚Äî"}`,
          attachment: fs.createReadStream(filePath)
        },
        event.threadID,
        () => {
          try { fs.unlinkSync(filePath); } catch {}
          if (pending?.messageID) api.unsendMessage(pending.messageID);
        },
        event.messageID
      );
    } catch (err) {
      console.error("[hat] L·ªói:", err?.message);
      if (pending?.messageID) api.unsendMessage(pending.messageID);
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
      api.sendMessage(`‚ùå T·∫£i/g·ª≠i b√†i th·∫•t b·∫°i: ${err?.message || err}`, event.threadID, event.messageID);
    }
  },
};
